// <auto-generated />
using System;
using Hospital.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hospital.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250522153549_AddNewEntity")]
    partial class AddNewEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hospital.Domain.Users.Appointmets.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId1");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Discharge.DischargeSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SummaryText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId1");

                    b.ToTable("DischargeSummaries");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.DoctorSpecilization", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecilizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SpecilizationId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorId", "SpecilizationId");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("SpecilizationId");

                    b.HasIndex("SpecilizationId1");

                    b.ToTable("DoctorSpecilizations");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.Specilization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specilizations");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Inventory.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Invoices.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId1");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Invoices.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<Guid?>("InvoicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoicesId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Prescriptions.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId1");

                    b.HasIndex("PatientId1");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("UserBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("UserBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.Doctor", b =>
                {
                    b.HasBaseType("UserBase");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Receptionists.Receptionist", b =>
                {
                    b.HasBaseType("UserBase");

                    b.Property<string>("DeskNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Appointmets.Appointment", b =>
                {
                    b.HasOne("UserBase", "Doctor")
                        .WithMany("AppointmentsAsDoctor")
                        .HasForeignKey("DoctorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Discharge.DischargeSummary", b =>
                {
                    b.HasOne("UserBase", "Doctor")
                        .WithMany("DischargeSummaries")
                        .HasForeignKey("DoctorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("DischargeSummary")
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.DoctorSpecilization", b =>
                {
                    b.HasOne("Hospital.Domain.Users.Doctors.Doctor", "Doctor")
                        .WithMany("DoctorSpecilizations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Users.Doctors.Doctor", null)
                        .WithMany("Specilizations")
                        .HasForeignKey("DoctorId1");

                    b.HasOne("Hospital.Domain.Users.Doctors.Specilization", "Specilization")
                        .WithMany("DoctorSpecilizations")
                        .HasForeignKey("SpecilizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Users.Doctors.Specilization", null)
                        .WithMany("Doctors")
                        .HasForeignKey("SpecilizationId1");

                    b.Navigation("Doctor");

                    b.Navigation("Specilization");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Invoices.Invoice", b =>
                {
                    b.HasOne("Hospital.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Invoices.InvoiceItem", b =>
                {
                    b.HasOne("Hospital.Domain.Users.Invoices.Invoice", "Invoices")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoicesId");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Prescriptions.Prescription", b =>
                {
                    b.HasOne("UserBase", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hospital.Domain.Users.Patients.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.Specilization", b =>
                {
                    b.Navigation("DoctorSpecilizations");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Invoices.Invoice", b =>
                {
                    b.Navigation("InvoiceItems");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Patients.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DischargeSummary");

                    b.Navigation("Invoices");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("UserBase", b =>
                {
                    b.Navigation("AppointmentsAsDoctor");

                    b.Navigation("DischargeSummaries");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("Hospital.Domain.Users.Doctors.Doctor", b =>
                {
                    b.Navigation("DoctorSpecilizations");

                    b.Navigation("Specilizations");
                });
#pragma warning restore 612, 618
        }
    }
}
